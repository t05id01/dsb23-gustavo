---
title: "Homerwork 1"
author: "Gustavo Passebon Mendonca"
date: 2023-05-14
format: 
  docx: default
  html:
    toc: true
    toc_float: true
    code-fold: true
editor: visual
---

```{r}
#| label: load-libraries
#| echo: false # This option disables the printing of code (only output is displayed).
#| message: false
#| warning: false

library(tidyverse)
library(nycflights13)
library(skimr)
library(ggplot2)
```

```{r}
#| label: problem-1

# Had an arrival delay of two or more hours (> 120 minutes)
flights %>% 
  filter(arr_delay >= 120) 

# Flew to Houston (IAH or HOU)
flights %>% 
  filter(dest %in% c("IAH","HOU")) 

# Were operated by United (`UA`), American (`AA`), or Delta (`DL`)
flights %>% 
  filter(carrier %in% c("UA","AA","DL")) 

# Departed in summer (July, August, and September)
flights %>% 
  filter(month %in% c(7,8,9))   
  
# Arrived more than two hours late, but didn't leave late
flights %>% 
  filter(arr_delay >= 120) %>% 
  filter(dep_delay>0)

# Were delayed by at least an hour, but made up over 30 minutes in flight
flights %>% 
  filter(dep_delay >= 60) %>% 
  filter(dep_delay - arr_delay > 30)

```

```{r}
#| label: problem-2

# What months had the highest and lowest % of cancelled flights?
flights %>% 
  filter(is.na(dep_time)==FALSE) %>% 
  count(month,sort=TRUE) %>% 
  mutate(percentTotal = n/sum(n)) %>% 
  arrange(percentTotal) %>% 
  slice(c(which.min(percentTotal),which.max(percentTotal)))


```

```{r}
#| label: problem-3
#Creating data frame with the tailnums that flew the most
mostFlights = flights %>%
  filter(is.na(tailnum)==FALSE) %>% 
  group_by(tailnum) %>% 
  count(tailnum,sort=TRUE)
#Left joining with the plane characteristics
left_join(mostFlights,planes,by="tailnum")
```

```{r}
#| label: problem-4
#Calculating average temperature
average_temperature=weather %>% 
  filter(is.na(temp)==FALSE) %>% 
  filter(month==07) %>% 
  filter(year==2013) %>%
  group_by(day) %>% 
  summarize(avgTemp=mean(temp))

#Ploting a histogram of the average temperatures
ggplot(average_temperature, aes(x = avgTemp))+
  geom_histogram()

#Finding outliers in wind_speed
weather %>% 
  slice(c(which.min(wind_speed),which.max(wind_speed)))

#Relationship between variables - setting up the dataframe
weather_stats = weather %>% 
  filter(is.na(temp)==FALSE) %>% 
  filter(month==07) %>% 
  filter(year==2013) %>%
  group_by(day)

#Scatter plot between Dewp and Humid
ggplot(weather_stats, aes(x=dewp, y = humid))+
  geom_point()
#Scatter plot between Precip and Visib
ggplot(weather_stats, aes(x=precip, y = visib))+
  geom_point()

```

```{r}
#| label: problem-5
#Number of planes without manufacturing date = 70
planes %>% 
  filter(is.na(year)==TRUE) %>% 
  count(year,sort=TRUE)

#Five most common manufacturers
common_manufacturers = planes %>% 
  filter(is.na(manufacturer)==FALSE) %>% 
  group_by(manufacturer) %>% 
  count(manufacturer,sort=TRUE)
#Storing the top5 in a dataframe that will be used later
most_common = data.frame(common_manufacturers[1:5,],stringsAsFactors = FALSE)
most_common

#Trends in manufacturers
#Joining the manufacturing information into Flights df
flights_manuf = left_join(flights,planes,by="tailnum")
#Filtering by most common, grouping by month, counting manufacturers
flights_trends = flights_manuf %>%
  filter(is.na(manufacturer)==FALSE) %>% 
  group_by(month) %>% 
  count(manufacturer,sort=TRUE) %>% 
  arrange(month) %>% 
  filter(manufacturer %in% most_common[,1])
#Ploting the results
ggplot(flights_trends, aes(x=month, y = n,color=manufacturer))+
  geom_line()+
  labs(title="Trends in manufacturers",
       x ="Months of 2013", y = "Number of flights per month")






```

```{r}
#| label: problem-6
#Oldest plane that flew from NYC in 2013
flights_manuf = left_join(planes,flights,by="tailnum")
flights_manuf %>% 
  slice(which.min(year.x))

#Number of airplanes that flew from NYC and are included in planes
mostFlights = flights %>% 
  filter(is.na(tailnum)==FALSE) %>% 
  group_by(tailnum) %>% 
  count(tailnum,sort=TRUE)

sum(mostFlights$tailnum %in% planes$tailnum)


```

```{r}
#| label: problem-7
#Median monthly arrival delay by airport
flights %>% 
  filter(is.na(arr_delay)==FALSE) %>% 
  group_by(month,origin) %>% 
  summarize(medianDelay = median(arr_delay))

#Median arrival delay by Airline and Airport
median_EWR = flights %>% 
  filter(is.na(arr_delay)==FALSE) %>%
  filter(origin=="EWR") %>% 
  group_by(month,carrier) %>% 
  summarize(medianDelay = median(arr_delay))

ggplot(median_EWR, aes(x=month, y = medianDelay,color=carrier))+
  geom_line()+
  labs(title="Median monthly arrival delays at EWR",
       x ="Months of 2013", y = "Median delay time (minutes)")
median_JFK = flights %>% 
  filter(is.na(arr_delay)==FALSE) %>%
  filter(origin=="JFK") %>% 
  group_by(month,carrier) %>% 
  summarize(medianDelay = median(arr_delay))

ggplot(median_JFK, aes(x=month, y = medianDelay,color=carrier))+
  geom_line()+
  labs(title="Median monthly arrival delays at JFK",
       x ="Months of 2013", y = "Median delay time (minutes)")

median_LGA = flights %>% 
  filter(is.na(arr_delay)==FALSE) %>%
  filter(origin=="LGA") %>% 
  group_by(month,carrier) %>% 
  summarize(medianDelay = median(arr_delay))

ggplot(median_LGA, aes(x=month, y = medianDelay,color=carrier))+
  geom_line()+
  labs(title="Median monthly arrival delays at LGA",
       x ="Months of 2013", y = "Median delay time (minutes)")
```

```{r}
#| label: problem-8
flights_airlines = left_join(flights,airlines,by="carrier")
flights_sfo = flights_airlines %>% 
  filter(dest=="SFO") %>%
  group_by(name) %>% 
  count(name,sort=TRUE,name="SFO")

flights_total = flights_airlines %>% 
  filter(is.na(dest)==FALSE) %>%
  group_by(name) %>% 
  count(name,sort=TRUE,name="total_flights")

left_join(flights_sfo,flights_total,by="name") %>% 
  mutate(percent_flights = SFO/total_flights)
```

```{r}
#| label: problem-9
cancellations <- flights %>% 
  
  # just filter for destination == 'SFO'
  filter(dest == 'SFO') %>% 
  
  # a cancelled flight is one with no `dep_time` 
  filter(is.na(dep_time))

#Given that the code provide already filtered the destination, the first step is to group_by month and to count the number of cancellations. Then, we would call ggplot2 and use histograms where x = months and y = count of cancellations
```

```{r}
#| label: problem-10
age_gaps <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-02-14/age_gaps.csv')

#Distribution of age gaps
ageDifference = age_gaps %>% 
  group_by(age_difference) %>% 
  count(age_difference,sort=TRUE)

ggplot(ageDifference, aes(x = age_difference,y=n))+
  geom_col()

#Most common age gap
ageDifference[1:2,]

#Half plus seven rule - Total occurrence
sevenRule = age_gaps %>% 
  #Calculating upper and lower boundaries
  mutate(LB = actor_1_age>(actor_2_age/2+7)) %>% 
  mutate(UB = (actor_2_age-7)*2 > actor_1_age)
#Calculating how many times the rule does not apply
sprintf("The rule does not apply on %s occasions",dim(sevenRule)[1]*2 - sum(sevenRule$LB) - sum(sevenRule$UB))

#Actors with the most love interests
age_gaps %>%
  count(actor_1_name,sort=TRUE,name="count") %>% 
  slice(which.max(count))

#Movies with most love interests
age_gaps %>%
  count(movie_name,sort=TRUE,name="count") %>% 
  slice(which.max(count))

#Changes in trends of age difference
age_trends = age_gaps %>% 
  group_by(release_year) %>% 
  summarize(meanDifference = mean(age_difference),medianDifference = median(age_difference))
#Plot of this difference with time
ggplot(age_trends, aes(x = release_year))+
  geom_line(aes(y = meanDifference, color="Mean annual age difference"))+
  geom_line(aes(y = medianDifference, color="Median annual age difference"))

#Same gender couples
sameGender = age_gaps %>% 
  mutate(SG = character_1_gender == character_2_gender)
#Number of occasions
sum(sameGender$SG)


```

# Deliverables

There is a lot of explanatory text, comments, etc. You do not need these, so delete them and produce a stand-alone document that you could share with someone. Render the edited and completed Quarto Markdown (qmd) file as a Word document (use the "Render" button at the top of the script editor window) and upload it to Canvas. You must be commiting and pushing tour changes to your own Github repo as you go along.

# Details

-   Who did you collaborate with: No one
-   Approximately how much time did you spend on this problem set: 10 hours
-   What, if anything, gave you the most trouble: ANSWER HERE

**Please seek out help when you need it,** and remember the [15-minute rule](https://mam2022.netlify.app/syllabus/#the-15-minute-rule){target="_blank"}. You know enough R (and have enough examples of code from class and your readings) to be able to do this. If you get stuck, ask for help from others, post a question on Slack-- and remember that I am here to help too!

> As a true test to yourself, do you understand the code you submitted and are you able to explain it to someone else?

# Rubric

13/13: Problem set is 100% completed. Every question was attempted and answered, and most answers are correct. Code is well-documented (both self-documented and with additional comments as necessary). Used tidyverse, instead of base R. Graphs and tables are properly labelled. Analysis is clear and easy to follow, either because graphs are labeled clearly or you've written additional text to describe how you interpret the output. Multiple Github commits. Work is exceptional. I will not assign these often.

8/13: Problem set is 60--80% complete and most answers are correct. This is the expected level of performance. Solid effort. Hits all the elements. No clear mistakes. Easy to follow (both the code and the output). A few Github commits.

5/13: Problem set is less than 60% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not assign these often. Displays minimal effort. Doesn't complete all components. Code is poorly written and not documented. Uses the same type of plot for each graph, or doesn't use plots appropriate for the variables being analyzed. No Github commits.
